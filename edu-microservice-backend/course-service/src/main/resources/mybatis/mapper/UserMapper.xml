<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="app.command.api.data.UserMapper">
	<resultMap id="BaseResultMap" type="app.command.api.data.UserPo">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="gender" jdbcType="TINYINT" property="gender" />
		<result column="birth" jdbcType="TIMESTAMP" property="birth" />
		<result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
		<result column="avatar" jdbcType="VARCHAR" property="avatar" />
		<result column="display_name" jdbcType="VARCHAR" property="displayName" />
		<result column="cover" jdbcType="VARCHAR" property="cover" />
		<result column="password" jdbcType="VARCHAR" property="password" />
		<result column="is_deleted" jdbcType="TINYINT" property="isDeleted" />
		<result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
		<result column="phone" jdbcType="VARCHAR" property="phone" />
		<result column="role_id" jdbcType="BIGINT" property="roleId" />
		<result column="email" jdbcType="VARCHAR" property="email" />
	</resultMap>
	<sql id="Base_Column_List">
		idgender, birth, created_at, avatar, display_name, cover, password, is_deleted, updated_at, phone, role_id, , email
	</sql>
	<select id="findAll" resultMap="BaseResultMap">
		select <include refid="Base_Column_List" /> from user
	</select>
	<select id="getById" resultMap="BaseResultMap">
		select <include refid="Base_Column_List" /> from user where id = #{id, jdbcType=BIGINT}
	</select>
	<insert id="save" parameterType="app.command.api.data.UserPo">
		insert into user (<include refid="Base_Column_List" />, <include refid="Blob_Column_List" />) 
		values (#{gender, jdbcType=TINYINT}, #{birth, jdbcType=TIMESTAMP}, #{createdAt, jdbcType=TIMESTAMP}, #{avatar, jdbcType=VARCHAR}, #{displayName, jdbcType=VARCHAR}, #{cover, jdbcType=VARCHAR}, #{password, jdbcType=VARCHAR}, #{isDeleted, jdbcType=TINYINT}, #{updatedAt, jdbcType=TIMESTAMP}, #{phone, jdbcType=VARCHAR}, #{roleId, jdbcType=BIGINT}, #{id, jdbcType=BIGINT}, #{email, jdbcType=VARCHAR})
	</insert>
	<update id="updateById" parameterType="app.command.api.data.UserPo">
		update user
			<set>
				<if test="gender != null">
					gender = #{gender, jdbcType=TINYINT}, 
				</if>
				<if test="birth != null">
					birth = #{birth, jdbcType=TIMESTAMP}, 
				</if>
				<if test="createdAt != null">
					created_at = #{createdAt, jdbcType=TIMESTAMP}, 
				</if>
				<if test="avatar != null">
					avatar = #{avatar, jdbcType=VARCHAR}, 
				</if>
				<if test="displayName != null">
					display_name = #{displayName, jdbcType=VARCHAR}, 
				</if>
				<if test="cover != null">
					cover = #{cover, jdbcType=VARCHAR}, 
				</if>
				<if test="password != null">
					password = #{password, jdbcType=VARCHAR}, 
				</if>
				<if test="isDeleted != null">
					is_deleted = #{isDeleted, jdbcType=TINYINT}, 
				</if>
				<if test="updatedAt != null">
					updated_at = #{updatedAt, jdbcType=TIMESTAMP}, 
				</if>
				<if test="phone != null">
					phone = #{phone, jdbcType=VARCHAR}, 
				</if>
				<if test="roleId != null">
					role_id = #{roleId, jdbcType=BIGINT}, 
				</if>
				<if test="id != null">
					id = #{id, jdbcType=BIGINT}, 
				</if>
				<if test="email != null">
					email = #{email, jdbcType=VARCHAR}, 
				</if>

			</set> 
		where id = #{id, jdbcType=BIGINT}
	</update>
	<delete id="deleteById">
		delete from user where id = #{id, jdbcType=BIGINT}
	</delete>
	<select id="pagination" parameterType="app.command.api.data.Pagination" resultMap="BaseResultMap">
		select <include refid="Base_Column_List" /> from user 
		order by id desc 
		limit #{offset, jdbcType=BIGINT} ,#{limit,jdbcType=INTEGER}
	</select>
	<select id="countAll" resultType="java.lang.Long">
		select count(*) from user
	</select>
</mapper>